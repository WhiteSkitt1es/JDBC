package com.jdbc.starter;

import com.jdbc.starter.util.ConnectionManager;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JdbcRunner {
    public static void main(String[] args) throws SQLException {
//        Class<Driver> driverClass = Driver.class;
//        String sql = """
//                CREATE TABLE IF NOT EXISTS info
//                (
//                    id BIGINT AUTO_INCREMENT PRIMARY KEY,
//                    name VARCHAR(128) NOT NULL
//                );
//                """;
//        String sql1 = """
//                DROP TABLE IF EXISTS info;
//                """;
//        String sql2 = """
//                INSERT INTO info (name)
//                VALUES
//                ('Test autogenerated');
//                """;
//        String sql3 = """
//                DELETE FROM info;
//                """;
//        String sql4 = """
//                UPDATE info
//                SET name = 'Very test'
//                WHERE id = 7;
//                """;
//        String sql5 = """
//                SELECT * FROM ticket;
//                """;
//        try (Connection connection = ConnectionManager.open();
//             Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE)) {
//
//
//            System.out.println(connection.getSchema());
//            System.out.println(connection.getTransactionIsolation()); // Transaction status
//
//            boolean executeResult = statement.execute(sql); // DDL operations
//            System.out.println(executeResult);
//            System.out.println(statement.getUpdateCount());
//            int result = statement.executeUpdate(sql4); // DML operations
//            System.out.println(result);
//            ResultSet resultSet = statement.executeQuery(sql5); // only operation SELECT
//            while(resultSet.next()){
//                System.out.println(resultSet.getInt("id"));
//                System.out.println(resultSet.getString("passenger_no"));
//                System.out.println(resultSet.getString("passenger_name"));
//                System.out.println(resultSet.getBigDecimal("cost"));
//                System.out.println("--------------------");
//            }
//            int result = statement.executeUpdate(sql2, Statement.RETURN_GENERATED_KEYS); // return id after insert into
//            ResultSet generatedKeys = statement.getGeneratedKeys();
//            if (generatedKeys.next()){
//                int id = generatedKeys.getInt(1);
//                System.out.println(id);
//            }
//        }
//        long flightId = 2L;
//        List<Long> ticketsByFlightId = getTicketsByFlightId(flightId);
//        System.out.println(ticketsByFlightId);
//        List<Long> flightsBetween = getFlightsBetween(LocalDate.of(2020, 6, 1).atStartOfDay(), LocalDateTime.now());
//        System.out.println(flightsBetween);
        checkMetaData();
    }

    private static void checkMetaData() throws SQLException {
        try (Connection connection = ConnectionManager.open();) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet catalogs = metaData.getCatalogs();
            while (catalogs.next()) {
                System.out.println(catalogs.getString(1));

                ResultSet schemas = metaData.getSchemas();
                while (schemas.next()) {
                    System.out.println(schemas.getString("TABLE_SCHEM"));

                    ResultSet metaDataTables = metaData.getTables("flight_repository", null, "%", null);
                    while (metaDataTables.next()) {
                        System.out.println(metaDataTables.getString("TABLE_NAME"));
                    }
                }
            }
        }
    }

    private static List<Long> getFlightsBetween(LocalDateTime start, LocalDateTime end) throws SQLException {
        String sql = """
                SELECT id
                FROM flight
                WHERE departure_date BETWEEN ? AND ?;
                """;
        List<Long> list = new ArrayList<>();
        try (Connection connection = ConnectionManager.open(); PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
            preparedStatement.setFetchSize(50);
            preparedStatement.setQueryTimeout(10);
            preparedStatement.setMaxRows(100);
            System.out.println(preparedStatement);
            preparedStatement.setTimestamp(1, Timestamp.valueOf(start));
            preparedStatement.setTimestamp(2, Timestamp.valueOf(end));
            System.out.println(preparedStatement);

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                list.add(resultSet.getLong("id"));
            }
        }
        return list;
    }

    private static List<Long> getTicketsByFlightId(Long flightId) throws SQLException {
        String sql = """
                SELECT id
                FROM ticket
                WHERE flight_id = ?
                """;
        List<Long> list = new ArrayList<>();
        try (Connection connection = ConnectionManager.open(); PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
            preparedStatement.setLong(1, flightId);

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                //list.add(resultSet.getLong("id"));
                list.add(resultSet.getObject("id", Long.class)); // NULL safe
            }
        }
        return list;
    }
}
